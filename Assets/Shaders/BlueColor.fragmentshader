#version 330 core

// Ouput to fragment shader
out vec3 color;

uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent

in vec4 v_color;

in vec3 normal;          // Transformed normal in View Space
in vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
in vec4 lightVector;     // Vector from the vertex to the Light in View Space

uniform vec3 lightColor;
uniform vec3 lightAttenuation; // x: kC  y: kL  z: kQ

void main()
{
    // set the fragment color to the interpolated vertex color
    // normalize stuff
    vec3 t_color = v_color.rgb;
    vec3 norm = normalize(normal);
    vec3 eye_vector = normalize(eyeVector);
    // maintain 4th element incase
    vec4 light_vector = vec4(normalize(lightVector.xyz), lightVector.w);
    // distance
    float distance = length(light_vector.xyz);
    // Ambient
    vec3 ambient = materialCoefficients.x * lightColor;


    float cosTheta = clamp( dot( norm, light_vector.xyz ), 0,1 );
    //color = t_color* lightColor *cosTheta;
    vec3 reflection = reflect(-light_vector.xyz, norm);

    float cosPhi = clamp( dot( eye_vector, reflection ), 0,1 );

    // Diffuse
    vec3 diffuse = materialCoefficients.y * cosTheta * lightColor;

    // Specular
    float spec = pow(max(cosPhi, 0.0), materialCoefficients.w);
    vec3 specular = materialCoefficients.z * spec * lightColor;

    float attenuation = 1.0f / (lightAttenuation.x + lightAttenuation.y * distance + lightAttenuation.z * (distance * distance));
    if(lightVector.w > 0){
    diffuse  *= attenuation;
    specular *= attenuation;
    }
    color = (ambient  + diffuse +specular ) * t_color;

}
