#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec3 vertexColor; 

// Values that stay constant for the whole mesh.
uniform mat4 ViewProjectionTransform;
uniform mat4 ProjectionTransform;
uniform mat4 ViewTransform;
uniform mat4 WorldTransform;

// Outputs to fragment shader
out vec3 normal;          // Transformed normal in View Space
out vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
out vec4 lightVector;     // Vector from the vertex to the Light in View Space
                          // Length of lightVector is the distance between light and vertex

// light position
uniform vec4 WorldLightPosition; // if w = 1: Point light, if w = 0: directional light


out vec4 v_color;

void main()
{
    mat4 MV = ViewTransform * WorldTransform;
    mat4 MVP = ProjectionTransform * MV;

    // Output position of the vertex, in clip space : MVP * position
    gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
    v_color = vec4(vertexColor,1);
    // Isolate for now
    float dir = WorldLightPosition.w;
    // Probably need this for the light?
    vec3 Position_worldspace = (WorldTransform * vec4(vertexPosition_modelspace, 1)).xyz;

    vec3 vertexPosition_cameraspace = ( MV * vec4(vertexPosition_modelspace,1)).xyz;
    eyeVector = vec3(0,0,0) - vertexPosition_cameraspace;
    if(WorldLightPosition.w == 1)
    {
    //vec3 LightPosition_cameraspace = ( ViewTransform * WorldLightPosition).xyz;
    //lightVector = vec4(LightPosition_cameraspace - vertexPosition_modelspace, dir);
    lightVector = vec4(WorldLightPosition.xyz - Position_worldspace, dir);
    }
    else
    {
    lightVector = ViewTransform * WorldLightPosition;
    }


    mat3 Winvt =mat3(transpose(inverse(WorldTransform)));

    normal = ( Winvt * vertexNormal_modelspace);



}

